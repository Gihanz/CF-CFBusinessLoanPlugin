package com.ibm.ecm.extension;

import javax.servlet.http.HttpServletRequest;

import com.ibm.ecm.extension.PluginResponseFilter;
import com.ibm.ecm.extension.PluginServiceCallbacks;
import com.ibm.json.java.JSONArray;
import com.ibm.json.java.JSONObject;

/**
 * Provides an abstract class that is extended to create a filter for responses
 * from a particular service. The response from the service is provided to the
 * filter in JSON format before it is returned to the web browser. The filter
 * can then modify that response, and the modified response is returned to the
 * web browser.
 */
public class LunchFilter extends PluginResponseFilter {

	/**
	 * Returns an array of the services that are extended by this filter.
	 * 
	 * @return A <code>String</code> array of names of the services. These are
	 *         the servlet paths or Struts action names.
	 */
	public String[] getFilteredServices() {
		return new String[] { "/p8/getTransferedWorkflows" };
	}

	/**
	 * Filters the response from the service.
	 * 
	 * @param serverType
	 *            A <code>String</code> that indicates the type of server that
	 *            is associated with the service. This value can be one or more
	 *            of the following values separated by commas:
	 *            <table border="1">
	 *            <tr>
	 *            <th>Server Type</th>
	 *            <th>Description</th>
	 *            </tr>
	 *            <tr>
	 *            <td><code>p8</code></td>
	 *            <td>IBM FileNet P8</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>cm</code></td>
	 *            <td>IBM Content Manager</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>od</code></td>
	 *            <td>IBM Content Manager OnDemand</td>
	 *            </tr>
	 *         	  <tr>
	 *         		<td><code>cmis</code></td>
	 *         		<td>Content Management Interoperability Services</td>
	 *         	  </tr>
	 *            <tr>
	 *            <td><code>common</code></td>
	 *            <td>For services that are not associated with a particular
	 *            server</td>
	 *            </tr>
	 *            </table>
	 * @param callbacks
	 *            An instance of the
	 *            <code>{@link com.ibm.ecm.extension.PluginServiceCallbacks PluginServiceCallbacks}</code>
	 *            class that contains functions that can be used by the service.
	 *            These functions provide access to plug-in configuration and
	 *            content server APIs.
	 * @param request
	 *            An <code>HttpServletRequest</code> object that provides the
	 *            request. The service can access the invocation parameters from
	 *            the request.
	 * @param jsonResponse
	 *            The <code>JSONObject</code> object that is generated by the
	 *            service. Typically, this object is serialized and sent as the
	 *            response. The filter modifies this object to change the
	 *            response that is sent.
	 * @throws Exception
	 *             For exceptions that occur when the service is running.
	 *             Information about the exception is logged as part of the
	 *             client logging and an error response is automatically
	 *             generated and returned.
	 */
	public void filter(String serverType, PluginServiceCallbacks callbacks,
			HttpServletRequest request, JSONObject jsonResponse) throws Exception {
		
		String desktopId = request.getParameter("desktop");
		System.out.println("It is From Lunch Filter");
		System.out.println("Desktop Filter is "+desktopId);
		
		System.out.println("REquest Full Object iS"+request.toString());
		System.out.println("Response Full Object iS"+jsonResponse.toString());
		
		JSONArray array = (JSONArray)jsonResponse.get("items");
	      System.out.println("::::::::::::::::::::::array:::::::::::" + array.size());
	      if(desktopId.equalsIgnoreCase("BusinessLoan"))
	      {
	    	  System.out.println("Inside Business Loan Application");
	    	 /* for (int index = 0; index < array.size(); index++)
		      {
	    		  JSONObject criteriaObject = (JSONObject)array.get(index);
	    		  String authoredName1= criteriaObject.get("authoredName").toString();
	    		  if(!authoredName1.equalsIgnoreCase("New Loan Granting"))
	    		  {
	    			  System.out.println("Am inside"+index);
	    			  array.remove(index);
	    			  System.out.println("size"+array.size());
	    		  }
	    		  
		      }*/
	    	  /*JSONObject jo = new JSONObject();
	    	  jo.put("authoredName", "New Loan Granting");
	    	  jo.put("name", "New Loan Granting");
	    	  array.clear();
	    	  array.set(0, jo);*/
	    	  
	    	 // System.out.println("Final JSON"+array.toString());
	    	  JSONArray ccc = new JSONArray();
	    	  JSONObject cv = new JSONObject();
	    	  cv.put("authoredName", "New Loan Granting");
	    	  cv.put("name", "New Loan Granting");
	    	  
	    	  JSONObject cv1 = new JSONObject();
	    	  cv1.put("authoredName", "Subsequent Disbursement");
	    	  cv1.put("name", "Subsequent Disbursement");
	    	  
	    	  JSONObject cv2 = new JSONObject();
	    	  cv2.put("authoredName", "Reschedule of Loan");
	    	  cv2.put("name", "Reschedule of Loan");
	    	  
	    	  ccc.add(0, cv);
	    	  ccc.add(1, cv1);
	    	  ccc.add(2, cv2);
	    	  System.out.println("cccc"+ccc);
	    	  
	    	  array.retainAll(ccc);
	    	  
	    	  System.out.println("final Array "+array);
	    	  
	      }
	}
}
